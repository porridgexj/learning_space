# Generated by Django 5.1.6 on 2025-03-07 23:05

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="LearningSpace",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("space_name", models.CharField(help_text="Name", max_length=255)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description", null=True),
                ),
                ("seat_num", models.IntegerField(help_text="Total number of seats")),
                (
                    "left_seat_num",
                    models.IntegerField(help_text="Available seats count"),
                ),
                (
                    "score",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Average score",
                        max_digits=3,
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Longitude",
                        max_digits=9,
                        null=True,
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Latitude",
                        max_digits=9,
                        null=True,
                    ),
                ),
                (
                    "create_time",
                    models.DateTimeField(auto_now_add=True, help_text="Creation time"),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[(0, "Open"), (1, "Closed")],
                        default=0,
                        help_text="Status: 0 - Open, 1 - Closed",
                    ),
                ),
                (
                    "img_cover",
                    models.CharField(
                        blank=True, help_text="space cover", max_length=255, null=True
                    ),
                ),
            ],
            options={
                "db_table": "learning_space",
                "indexes": [models.Index(fields=["status"], name="idx_status")],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="User email", max_length=255, unique=True
                    ),
                ),
                (
                    "password",
                    models.CharField(help_text="Encrypted password", max_length=255),
                ),
                (
                    "nickname",
                    models.CharField(help_text="User nickname", max_length=100),
                ),
                (
                    "create_time",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Account creation time"
                    ),
                ),
            ],
            options={
                "db_table": "user",
                "indexes": [models.Index(fields=["email"], name="idx_email")],
            },
        ),
        migrations.CreateModel(
            name="Seat",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("seat_no", models.IntegerField(help_text="Seat number")),
                (
                    "status",
                    models.IntegerField(
                        choices=[(0, "Available"), (1, "Reserved"), (2, "Unavailable")],
                        help_text="Seat status",
                    ),
                ),
                (
                    "space",
                    models.ForeignKey(
                        help_text="Associated learning space ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user.learningspace",
                    ),
                ),
            ],
            options={
                "db_table": "seat",
                "unique_together": {("space", "seat_no")},
            },
        ),
        migrations.CreateModel(
            name="FavouriteSpace",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "create_time",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Favorite creation time"
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[(0, "Active"), (1, "Removed")],
                        default=0,
                        help_text="Status",
                    ),
                ),
                (
                    "space",
                    models.ForeignKey(
                        help_text="Learning space ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user.learningspace",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user.user",
                    ),
                ),
            ],
            options={
                "db_table": "favourite_space",
                "unique_together": {("user", "space")},
            },
        ),
        migrations.CreateModel(
            name="ContactLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email", models.EmailField(help_text="Contact email", max_length=255)),
                ("message", models.TextField(help_text="Feedback content")),
                (
                    "create_time",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Submission time"
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[(0, "Pending"), (1, "Resolved")],
                        default=0,
                        help_text="Processing status",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User ID",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="user.user",
                    ),
                ),
            ],
            options={
                "db_table": "contact_log",
                "indexes": [models.Index(fields=["status"], name="idx_process_status")],
            },
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "comment_description",
                    models.TextField(
                        blank=True, help_text="Comment content", null=True
                    ),
                ),
                (
                    "score",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Rating (1-5)",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (0, "Active"),
                            (1, "Deleted"),
                            (2, "Maintenance report"),
                        ],
                        default=0,
                        help_text="Status",
                    ),
                ),
                (
                    "create_time",
                    models.DateTimeField(auto_now_add=True, help_text="Creation time"),
                ),
                (
                    "update_time",
                    models.DateTimeField(auto_now=True, help_text="Last update time"),
                ),
                (
                    "space",
                    models.ForeignKey(
                        help_text="Learning space ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user.learningspace",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user.user",
                    ),
                ),
            ],
            options={
                "db_table": "comment",
                "indexes": [models.Index(fields=["space"], name="idx_space")],
            },
        ),
        migrations.CreateModel(
            name="Booking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_time", models.DateTimeField(help_text="Start time")),
                ("end_time", models.DateTimeField(help_text="End time")),
                ("seat_no", models.IntegerField(help_text="Seat number")),
                (
                    "create_time",
                    models.DateTimeField(auto_now_add=True, help_text="Creation time"),
                ),
                (
                    "space",
                    models.ForeignKey(
                        help_text="Learning space ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user.learningspace",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user.user",
                    ),
                ),
            ],
            options={
                "db_table": "booking",
                "indexes": [
                    models.Index(
                        fields=["start_time", "end_time"], name="idx_time_range"
                    )
                ],
                "unique_together": {("space", "seat_no", "start_time")},
            },
        ),
    ]
